
GP Scheduler Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e6  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043e  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  74:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_init>:
}

void GPIO_off_led(uint8 bitnum)
{
	// function to turn off a certain LED in PORTA
	CLRBIT(PORTA,bitnum);
  7c:	d0 9a       	sbi	0x1a, 0	; 26
  7e:	d1 9a       	sbi	0x1a, 1	; 26
  80:	d2 9a       	sbi	0x1a, 2	; 26
  82:	d8 98       	cbi	0x1b, 0	; 27
  84:	d9 98       	cbi	0x1b, 1	; 27
  86:	da 98       	cbi	0x1b, 2	; 27
  88:	08 95       	ret

0000008a <GPIO_toggle_led>:
}

void GPIO_toggle_led(uint8 bitnum)
{
	// function to toggle a certain LED in PORTA
	TOGGLEBIT(PORTA,bitnum);
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <GPIO_toggle_led+0xc>
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	8a 95       	dec	r24
  98:	e2 f7       	brpl	.-8      	; 0x92 <GPIO_toggle_led+0x8>
  9a:	29 27       	eor	r18, r25
  9c:	2b bb       	out	0x1b, r18	; 27
  9e:	08 95       	ret

000000a0 <main>:
#define F_CPU 1000000


int main(void)
{
	SETBIT(SREG,I ); //enable Interrupts Globally 
  a0:	8f b7       	in	r24, 0x3f	; 63
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8f bf       	out	0x3f, r24	; 63
	GPIO_init(); 
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_init>
	TIMER0_init();
  aa:	0e 94 93 00 	call	0x126	; 0x126 <TIMER0_init>
	startscheduler();
  ae:	0e 94 5c 00 	call	0xb8	; 0xb8 <startscheduler>
	
	return 0 ;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <startscheduler>:
void startscheduler(void)
{
	while (1)
	
	{
		if (NUMBER_OF_OVERFLOWS_PER_SECOND == Led1Counter) // Task 1 is repeated every 1 second ( 4 Timer over flow cycles)
  b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Led1Counter>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	29 f4       	brne	.+10     	; 0xca <startscheduler+0x12>
		{
			GPIO_toggle_led(LED1); //our 1st task
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 45 00 	call	0x8a	; 0x8a <GPIO_toggle_led>
			Led1Counter =0;
  c6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Led1Counter>
		}
		
		if (NUMBER_OF_OVERFLOWS_PER_TWO_AND_HALF_SECOND == Led2Counter) // Task 2 is repeated every 2.5 seconds (10 Timer overflow cycles)
  ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Led2Counter>
  ce:	8a 30       	cpi	r24, 0x0A	; 10
  d0:	29 f4       	brne	.+10     	; 0xdc <startscheduler+0x24>
		{
			GPIO_toggle_led(LED2);//2nd task
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 45 00 	call	0x8a	; 0x8a <GPIO_toggle_led>
			Led2Counter =0;
  d8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Led2Counter>
		}
		
		if (NUMBER_OF_OVERFLOWS_PER_FOUR_SECONDS == Led3Counter) // Task 3 is repeated every 4 Second
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	51 f7       	brne	.-44     	; 0xb8 <startscheduler>
		{
			GPIO_toggle_led(LED3);//3rd task
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 45 00 	call	0x8a	; 0x8a <GPIO_toggle_led>
			Led3Counter =0;
  ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ee:	e4 cf       	rjmp	.-56     	; 0xb8 <startscheduler>

000000f0 <__vector_9>:
uint8 Led1Counter =0;
uint8 Led2Counter =0;
uint8 Led3Counter =0;

ISR(TIMER0_OVF_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
// counters are incremented every quarter second when overflow interrupt is serviced
//(prescaler was set to make timer overflow every 1\4 sec)

Led1Counter++; 
  fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Led1Counter>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Led1Counter>
Led2Counter++;
 106:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Led2Counter>
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Led2Counter>
Led3Counter++;
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <TIMER0_init>:

void TIMER0_init(void)
{
 //timer initial value
 TCNT0 = 0;
 126:	12 be       	out	0x32, r1	; 50
 //enable overflow interrupt
 SETBIT(TIMSK,TOIE0);
 128:	89 b7       	in	r24, 0x39	; 57
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	89 bf       	out	0x39, r24	; 57

 /* configure the timer
 * 1. Non PWM mode FOC0=1
 * 2. PreScaler= F_CPU/1024 CS00=1 CS01=0 CS02=1 ( this was calculated so Timer overflows every 1/4 second)
 */
 SETBIT(TCCR0,FOC0);
 12e:	83 b7       	in	r24, 0x33	; 51
 130:	80 68       	ori	r24, 0x80	; 128
 132:	83 bf       	out	0x33, r24	; 51
 SETBIT(TCCR0,CS02);
 134:	83 b7       	in	r24, 0x33	; 51
 136:	84 60       	ori	r24, 0x04	; 4
 138:	83 bf       	out	0x33, r24	; 51
 SETBIT(TCCR0,CS00);
 13a:	83 b7       	in	r24, 0x33	; 51
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	83 bf       	out	0x33, r24	; 51
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
